$Primary-color: #4682B4;
$Secondary-color: #fff;
$black-color: #000;
@mixin easeOut{
  transition: all 0.5s ease-out;
}
@mixin btn{
  button{
    border: none;
    margin-top: 0.5rem;
    color: $Primary-color;
    padding: 1rem;
    cursor: pointer;
    border-radius: 5px;
    font-size: 1rem;
    font-weight: 600;
    text-align: center;
    a{
    color: inherit;
    }
    &:hover{
      background-color: $Primary-color;
      color: $Secondary-color;
      border: 2px solid $Secondary-color;
      @include easeOut()
    }
  }
}
@mixin heading{
  background-color: $Primary-color;
  text-align: center;
  color: $Secondary-color;
  text-transform: uppercase;
}
@mixin details($class-name,$bg-image){
  h1{
    padding: 1rem 0;
  }
  .#{$class-name}  {
    padding-top: 2rem;
    position: relative;
    background-size: cover;
    text-align: center;
    background-position: center;
    background-image: $bg-image;
    min-height: 70vh;
  
    &::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background-color: rgba(243, 237, 237, 0.5); /* Semi-transparent red */
      /* Other styles for the pseudo-element */
    }
  
    & > *{
      display: grid;
      grid-template-columns: 1fr 1fr;
      width: 90%;
      gap: 2rem;
      margin: 0 auto;
      z-index: 1;
      position: relative;
      padding: 2rem 0;
      div:first-child{
        text-align: start;
        background-color: $Primary-color;
        line-height: 1.7rem;
        padding: 2rem;
        .about-us-btns{
         @include btn
        }
      }
      div:nth-child(2){
        display: flex;
       border: 3px solid $Primary-color;
      }
      img{
        width: 100%;
        
      }
    }
  }
}
// Wanted to have mixins I can pass argument into, I asked chatgpt and it gave me this.
@mixin comeFromRight{
    @keyframes comeFromRight {
        from {
          transform: translateX(100%); // Start position (outside the container)
        }
        to {
          transform: none; // End position (original position)
        }
      }
}
@mixin comeFromTop{
    @keyframes comeFromRight {
        from {
          transform: translateY(-100%); // Start position (outside the container)
        }
        to {
          transform: none; // End position (original position)
        }
      }
}

@mixin mediaMd{
  @media screen and (max-width: 768px) {
    @content;
  }
  
}
@mixin mediaSm{
  @media screen and (max-width: 600px) {
    @content;
  }
  
}

@mixin mediaSs{
  @media screen and (max-width: 550px) {
    @content;
  }
  
}
